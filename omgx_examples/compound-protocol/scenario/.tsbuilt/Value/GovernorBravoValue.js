"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGovernorBravoValue = exports.governorBravoFetchers = exports.getGovernorV = void 0;
const CoreValue_1 = require("../CoreValue");
const Value_1 = require("../Value");
const Command_1 = require("../Command");
const BravoProposalValue_1 = require("./BravoProposalValue");
const ContractLookup_1 = require("../ContractLookup");
async function getGovernorV(world, event) {
    const address = await CoreValue_1.mapValue(world, event, (str) => new Value_1.AddressV(ContractLookup_1.getGovernorAddress(world, str)), CoreValue_1.getCoreValue, Value_1.AddressV);
    return ContractLookup_1.getWorldContractByAddress(world, address.val);
}
exports.getGovernorV = getGovernorV;
async function governorAddress(world, governor) {
    return new Value_1.AddressV(governor._address);
}
async function getAdmin(world, governor) {
    return new Value_1.AddressV(await governor.methods.admin().call());
}
async function getPendingAdmin(world, governor) {
    return new Value_1.AddressV(await governor.methods.pendingAdmin().call());
}
async function getImplementation(world, governor) {
    return new Value_1.AddressV(await governor.methods.implementation().call());
}
async function getProposalThreshold(world, governor) {
    return new Value_1.NumberV(await governor.methods.proposalThreshold().call());
}
async function getVotingPeriod(world, governor) {
    return new Value_1.NumberV(await governor.methods.votingPeriod().call());
}
async function getVotingDelay(world, governor) {
    return new Value_1.NumberV(await governor.methods.votingDelay().call());
}
function governorBravoFetchers() {
    return [
        new Command_1.Fetcher(`
        #### Address

        * "GovernorBravo <GovernorBravo> Address" - Returns the address of governorBravo contract
        * E.g. "GovernorBravo GovernorBravoScenario Address"
      `, "Address", [new Command_1.Arg("governor", getGovernorV)], (world, { governor }) => governorAddress(world, governor), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### Admin

        * "GovernorBravo <Governor> Admin" - Returns the address of governorBravo admin
        * E.g. "GovernorBravo GovernorBravoScenario Admin"
      `, "Admin", [new Command_1.Arg("governor", getGovernorV)], (world, { governor }) => getAdmin(world, governor), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### Pending Admin

        * "GovernorBravo <Governor> PendingAdmin" - Returns the address of governorBravo pending admin
        * E.g. "GovernorBravo GovernorBravoScenario PendingAdmin"
      `, "PendingAdmin", [new Command_1.Arg("governor", getGovernorV)], (world, { governor }) => getPendingAdmin(world, governor), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### Implementation

        * "GovernorBravo <Governor> Implementation" - Returns the address of governorBravo implementation
        * E.g. "GovernorBravo GovernorBravoScenario Implementation"
      `, "Implementation", [new Command_1.Arg("governor", getGovernorV)], (world, { governor }) => getImplementation(world, governor), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### ProposalThreshold

        * "GovernorBravo <Governor> ProposalThreshold" - Returns the proposal threshold of the given governorBravo 
        * E.g. "GovernorBravo GovernorBravoScenario ProposalThreshold"
      `, "ProposalThreshold", [new Command_1.Arg("governor", getGovernorV)], (world, { governor }) => getProposalThreshold(world, governor), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### VotingPeriod

        * "GovernorBravo <Governor> VotingPeriod" - Returns the voting period of the given governorBravo 
        * E.g. "GovernorBravo GovernorBravoScenario VotingPeriod"
      `, "VotingPeriod", [new Command_1.Arg("governor", getGovernorV)], (world, { governor }) => getVotingPeriod(world, governor), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### VotingDelay

        * "GovernorBravo <Governor> VotingDelay" - Returns the voting delay of the given governorBravo 
        * E.g. "GovernorBravo GovernorBravoScenario VotingDelay"
      `, "VotingDelay", [new Command_1.Arg("governor", getGovernorV)], (world, { governor }) => getVotingDelay(world, governor), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### Proposal

        * "GovernorBravo <Governor> Proposal <...proposalValue>" - Returns information about a proposal
        * E.g. "GovernorBravo GovernorBravoScenario Proposal LastProposal Id"
      `, "Proposal", [
            new Command_1.Arg("governor", getGovernorV),
            new Command_1.Arg("params", CoreValue_1.getEventV, { variadic: true }),
        ], (world, { governor, params }) => BravoProposalValue_1.getProposalValue(world, governor, params.val), { namePos: 1 }),
    ];
}
exports.governorBravoFetchers = governorBravoFetchers;
async function getGovernorBravoValue(world, event) {
    return await Command_1.getFetcherValue("GovernorBravo", governorBravoFetchers(), world, event);
}
exports.getGovernorBravoValue = getGovernorBravoValue;
//# sourceMappingURL=data:application/json;base64,