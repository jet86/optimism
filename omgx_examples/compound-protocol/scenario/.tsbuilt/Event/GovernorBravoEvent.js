"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processGovernorBravoEvent = exports.governorBravoCommands = void 0;
const World_1 = require("../World");
const GovernorBravoBuilder_1 = require("../Builder/GovernorBravoBuilder");
const Invokation_1 = require("../Invokation");
const CoreValue_1 = require("../CoreValue");
const Command_1 = require("../Command");
const Verify_1 = require("../Verify");
const BravoProposalEvent_1 = require("./BravoProposalEvent");
const Utils_1 = require("../Utils");
const GovernorBravoValue_1 = require("../Value/GovernorBravoValue");
const Networks_1 = require("../Networks");
async function genGovernor(world, from, params) {
    let { world: nextWorld, governor, govData } = await GovernorBravoBuilder_1.buildGovernor(world, from, params);
    world = nextWorld;
    return World_1.addAction(world, `Deployed GovernorBravo ${govData.contract} to address ${governor._address}`, govData.invokation);
}
async function verifyGovernor(world, governor, apiKey, modelName, contractName) {
    if (world.isLocalNetwork()) {
        world.printer.printLine(`Politely declining to verify on local network: ${world.network}.`);
    }
    else {
        await Verify_1.verify(world, apiKey, modelName, contractName, governor._address);
    }
    return world;
}
async function mergeABI(world, from, governorDelegator, governorDelegate) {
    if (!world.dryRun) {
        // Skip this specifically on dry runs since it's likely to crash due to a number of reasons
        world = await Networks_1.mergeContractABI(world, "BravoDelegator", governorDelegator, governorDelegator.name, governorDelegate.name);
    }
    return world;
}
async function propose(world, from, governor, targets, values, signatures, calldatas, description) {
    const invokation = await Invokation_1.invoke(world, governor.methods.propose(targets, values, signatures, calldatas, description), from);
    return World_1.addAction(world, `Created new proposal "${description}" with id=${invokation.value} in Governor`, invokation);
}
async function setVotingDelay(world, from, governor, newVotingDelay) {
    let invokation = await Invokation_1.invoke(world, governor.methods._setVotingDelay(newVotingDelay.encode()), from);
    world = World_1.addAction(world, `Set voting delay to ${newVotingDelay.show()}`, invokation);
    return world;
}
async function setVotingPeriod(world, from, governor, newVotingPeriod) {
    let invokation = await Invokation_1.invoke(world, governor.methods._setVotingPeriod(newVotingPeriod.encode()), from);
    world = World_1.addAction(world, `Set voting period to ${newVotingPeriod.show()}`, invokation);
    return world;
}
async function setProposalThreshold(world, from, governor, newProposalThreshold) {
    let invokation = await Invokation_1.invoke(world, governor.methods._setProposalThreshold(newProposalThreshold.encode()), from);
    world = World_1.addAction(world, `Set proposal threshold to ${newProposalThreshold.show()}`, invokation);
    return world;
}
async function setImplementation(world, from, governor, newImplementation) {
    let invokation = await Invokation_1.invoke(world, governor.methods._setImplementation(newImplementation._address), from);
    world = World_1.addAction(world, `Set GovernorBravo implementation to ${newImplementation}`, invokation);
    mergeABI(world, from, governor, newImplementation);
    return world;
}
async function initiate(world, from, governor, governorAlpha) {
    let invokation = await Invokation_1.invoke(world, governor.methods._initiate(governorAlpha), from);
    world = World_1.addAction(world, `Initiated governor from GovernorAlpha at ${governorAlpha}`, invokation);
    return world;
}
async function harnessInitiate(world, from, governor) {
    let invokation = await Invokation_1.invoke(world, governor.methods._initiate(), from);
    world = World_1.addAction(world, `Initiated governor using harness function`, invokation);
    return world;
}
async function setPendingAdmin(world, from, governor, newPendingAdmin) {
    let invokation = await Invokation_1.invoke(world, governor.methods._setPendingAdmin(newPendingAdmin), from);
    world = World_1.addAction(world, `Governor pending admin set to ${newPendingAdmin}`, invokation);
    return world;
}
async function acceptAdmin(world, from, governor) {
    let invokation = await Invokation_1.invoke(world, governor.methods._acceptAdmin(), from);
    world = World_1.addAction(world, `Governor admin accepted`, invokation);
    return world;
}
async function setBlockNumber(world, from, governor, blockNumber) {
    return World_1.addAction(world, `Set Governor blockNumber to ${blockNumber.show()}`, await Invokation_1.invoke(world, governor.methods.setBlockNumber(blockNumber.encode()), from));
}
async function setBlockTimestamp(world, from, governor, blockTimestamp) {
    return World_1.addAction(world, `Set Governor blockTimestamp to ${blockTimestamp.show()}`, await Invokation_1.invoke(world, governor.methods.setBlockTimestamp(blockTimestamp.encode()), from));
}
function governorBravoCommands() {
    return [
        new Command_1.Command(`
        #### Deploy

        * "Deploy ...params" - Generates a new Governor
        * E.g. "Governor Deploy BravoDelegate"
      `, "Deploy", [new Command_1.Arg("params", CoreValue_1.getEventV, { variadic: true })], (world, from, { params }) => genGovernor(world, from, params.val)),
        new Command_1.Command(`
        #### Propose

        * "Governor <Governor> Propose description:<String> targets:<List> signatures:<List> callDataArgs:<List>" - Creates a new proposal in Governor
        * E.g. "Governor GovernorScenario Propose "New Interest Rate" [(Address cDAI)] [0] [("_setInterestRateModel(address)")] [[(Address MyInterestRateModel)]]
      `, "Propose", [
            new Command_1.Arg("governor", GovernorBravoValue_1.getGovernorV),
            new Command_1.Arg("description", CoreValue_1.getStringV),
            new Command_1.Arg("targets", CoreValue_1.getArrayV(CoreValue_1.getAddressV)),
            new Command_1.Arg("values", CoreValue_1.getArrayV(CoreValue_1.getNumberV)),
            new Command_1.Arg("signatures", CoreValue_1.getArrayV(CoreValue_1.getStringV)),
            new Command_1.Arg("callDataArgs", CoreValue_1.getArrayV(CoreValue_1.getArrayV(CoreValue_1.getCoreValue))),
        ], async (world, from, { governor, description, targets, values, signatures, callDataArgs }) => {
            const targetsU = targets.val.map((a) => a.val);
            const valuesU = values.val.map((a) => a.encode());
            const signaturesU = signatures.val.map((a) => a.val);
            const callDatasU = signatures.val.reduce((acc, cur, idx) => {
                const args = Utils_1.rawValues(callDataArgs.val[idx]);
                acc.push(Utils_1.encodeParameters(world, cur.val, args));
                return acc;
            }, []);
            return await propose(world, from, governor, targetsU, valuesU, signaturesU, callDatasU, description.val);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### Proposal

        * "GovernorBravo <Governor> Proposal <...proposalEvent>" - Returns information about a proposal
        * E.g. "GovernorBravo GovernorScenario Proposal LastProposal Vote For"
      `, "Proposal", [
            new Command_1.Arg("governor", GovernorBravoValue_1.getGovernorV),
            new Command_1.Arg("params", CoreValue_1.getEventV, { variadic: true }),
        ], (world, from, { governor, params }) => BravoProposalEvent_1.processProposalEvent(world, governor, params.val, from), { namePos: 1 }),
        new Command_1.Command(`
        #### SetBlockNumber

        * "Governor <Governor> SetBlockNumber <Seconds>" - Sets the blockNumber of the Governance Harness
        * E.g. "GovernorBravo SetBlockNumber 500"
    `, "SetBlockNumber", [new Command_1.Arg("governor", GovernorBravoValue_1.getGovernorV), new Command_1.Arg("blockNumber", CoreValue_1.getNumberV)], (world, from, { governor, blockNumber }) => setBlockNumber(world, from, governor, blockNumber), { namePos: 1 }),
        new Command_1.Command(`
        #### SetBlockTimestamp

        * "Governor <Governor> SetBlockNumber <Seconds>" - Sets the blockTimestamp of the Governance Harness
        * E.g. "GovernorBravo GovernorScenario SetBlockTimestamp 500"
    `, "SetBlockTimestamp", [
            new Command_1.Arg("governor", GovernorBravoValue_1.getGovernorV),
            new Command_1.Arg("blockTimestamp", CoreValue_1.getNumberV),
        ], (world, from, { governor, blockTimestamp }) => setBlockTimestamp(world, from, governor, blockTimestamp), { namePos: 1 }),
        new Command_1.Command(`
        #### SetVotingDelay

        * "GovernorBravo <Governor> SetVotingDelay <Blocks>" - Sets the voting delay of the GovernorBravo
        * E.g. "GovernorBravo GovernorBravoScenario SetVotingDelay 2"
    `, "SetVotingDelay", [
            new Command_1.Arg("governor", GovernorBravoValue_1.getGovernorV),
            new Command_1.Arg("newVotingDelay", CoreValue_1.getNumberV),
        ], (world, from, { governor, newVotingDelay }) => setVotingDelay(world, from, governor, newVotingDelay), { namePos: 1 }),
        new Command_1.Command(`
        #### SetVotingPeriod

        * "GovernorBravo <Governor> SetVotingPeriod <Blocks>" - Sets the voting period of the GovernorBravo
        * E.g. "GovernorBravo GovernorBravoScenario SetVotingPeriod 500"
    `, "SetVotingPeriod", [
            new Command_1.Arg("governor", GovernorBravoValue_1.getGovernorV),
            new Command_1.Arg("newVotingPeriod", CoreValue_1.getNumberV),
        ], (world, from, { governor, newVotingPeriod }) => setVotingPeriod(world, from, governor, newVotingPeriod), { namePos: 1 }),
        new Command_1.Command(`
        #### SetProposalThreshold

        * "GovernorBravo <Governor> SetProposalThreshold <Comp>" - Sets the proposal threshold of the GovernorBravo
        * E.g. "GovernorBravo GovernorBravoScenario SetProposalThreshold 500e18"
    `, "SetProposalThreshold", [
            new Command_1.Arg("governor", GovernorBravoValue_1.getGovernorV),
            new Command_1.Arg("newProposalThreshold", CoreValue_1.getNumberV),
        ], (world, from, { governor, newProposalThreshold }) => setProposalThreshold(world, from, governor, newProposalThreshold), { namePos: 1 }),
        new Command_1.Command(`
        #### Initiate

        * "GovernorBravo <Governor> Initiate <AddressV>" - Initiates the Governor relieving the given GovernorAlpha
        * E.g. "GovernorBravo GovernorBravoScenario Initiate (Address GovernorAlpha)"
    `, "Initiate", [
            new Command_1.Arg("governor", GovernorBravoValue_1.getGovernorV),
            new Command_1.Arg("governorAlpha", CoreValue_1.getAddressV),
        ], (world, from, { governor, governorAlpha }) => initiate(world, from, governor, governorAlpha.val), { namePos: 1 }),
        new Command_1.Command(`
        #### HarnessInitiate

        * "GovernorBravo <Governor> HarnessInitiate" - Uses harness function to bypass initiate for testing
        * E.g. "GovernorBravo GovernorBravoScenario HarnessInitiate"
    `, "HarnessInitiate", [new Command_1.Arg("governor", GovernorBravoValue_1.getGovernorV)], (world, from, { governor }) => harnessInitiate(world, from, governor), { namePos: 1 }),
        new Command_1.Command(`
        #### SetImplementation

        * "GovernorBravo <Governor> SetImplementation <Governor>" - Sets the address for the GovernorBravo implementation
        * E.g. "GovernorBravo GovernorBravoScenario SetImplementation newImplementation"
    `, "SetImplementation", [
            new Command_1.Arg("governor", GovernorBravoValue_1.getGovernorV),
            new Command_1.Arg("newImplementation", GovernorBravoValue_1.getGovernorV),
        ], (world, from, { governor, newImplementation }) => setImplementation(world, from, governor, newImplementation), { namePos: 1 }),
        new Command_1.Command(`
        #### SetPendingAdmin

        * "GovernorBravo <Governor> SetPendingAdmin <AddressV>" - Sets the address for the GovernorBravo pending admin
        * E.g. "GovernorBravo GovernorBravoScenario SetPendingAdmin newAdmin"
    `, "SetPendingAdmin", [
            new Command_1.Arg("governor", GovernorBravoValue_1.getGovernorV),
            new Command_1.Arg("newPendingAdmin", CoreValue_1.getAddressV),
        ], (world, from, { governor, newPendingAdmin }) => setPendingAdmin(world, from, governor, newPendingAdmin.val), { namePos: 1 }),
        new Command_1.Command(`
        #### AcceptAdmin

        * "GovernorBravo <Governor> AcceptAdmin" - Pending admin accepts the admin role
        * E.g. "GovernorBravo GovernorBravoScenario AcceptAdmin"
    `, "AcceptAdmin", [new Command_1.Arg("governor", GovernorBravoValue_1.getGovernorV)], (world, from, { governor }) => acceptAdmin(world, from, governor), { namePos: 1 }),
        new Command_1.Command(`#### MergeABI

        * "ComptrollerImpl <Impl> MergeABI" - Merges the ABI, as if it was a become.
        * E.g. "ComptrollerImpl MyImpl MergeABI
      `, "MergeABI", [
            new Command_1.Arg("governorDelegator", GovernorBravoValue_1.getGovernorV),
            new Command_1.Arg("governorDelegate", GovernorBravoValue_1.getGovernorV),
        ], (world, from, { governorDelegator, governorDelegate }) => mergeABI(world, from, governorDelegator, governorDelegate), { namePos: 1 }),
    ];
}
exports.governorBravoCommands = governorBravoCommands;
async function processGovernorBravoEvent(world, event, from) {
    return await Command_1.processCommandEvent("Governor", governorBravoCommands(), world, event, from);
}
exports.processGovernorBravoEvent = processGovernorBravoEvent;
//# sourceMappingURL=data:application/json;base64,