# TODO: Prefix all env vars with service name
# TODO: Allow specifing the image tag to use
version: "3"

services:
  dtl-replica:
    image: ethereumoptimism/data-transport-layer
    deploy:
      replicas: 1
    build:
      context: ..
      dockerfile: ./ops/docker/Dockerfile.data-transport-layer
    # override with the dtl script and the env vars required for it
    entrypoint: ./dtl.sh
    env_file:
      -  ./envs/dtl.env
    # set the rest of the env vars for the network whcih do not
    # depend on the docker-compose setup
    environment:
        # used for setting the address manager address
        URL: http://host.docker.internal:8080/addresses.json
        # connect to the 2 layers
        DATA_TRANSPORT_LAYER__L1_RPC_ENDPOINT: http://host.docker.internal:9545
        DATA_TRANSPORT_LAYER__L2_RPC_ENDPOINT: http://host.docker.internal:8545
        DATA_TRANSPORT_LAYER__L2_CHAIN_ID: 28
        DATA_TRANSPORT_LAYER__SYNC_FROM_L2: 'true'
        DATA_TRANSPORT_LAYER__SERVER_PORT: 7879
    ports:
      - ${DTL_PORT:-7879}:7879

  l2geth-replica:
    image: ethereumoptimism/l2geth
    deploy:
      replicas: 1
    build:
      context: ..
      dockerfile: ./ops/docker/Dockerfile.geth
    # override with the geth script and the env vars required for it
    entrypoint: sh ./geth.sh
    env_file:
      - ./envs/geth.env
    environment:
        ETH1_HTTP: http://host.docker.internal:8545
        ROLLUP_STATE_DUMP_PATH: http://host.docker.internal:8080/state-dump.latest.json
        # used for getting the addresses
        URL: http://host.docker.internal:8080/addresses.json
        # connecting to the DTL
        ROLLUP_CLIENT_HTTP: http://dtl-replica:7879
        ETH1_CTC_DEPLOYMENT_HEIGHT: 8
        RETRIES: 60
        # IS_VERIFIER: "true"
        ROLLUP_BACKEND: 'l2'
        ROLLUP_VERIFIER_ENABLE: 'true'
        # PRC
        RPC_PORT: 8547
    ports:
      - ${REPLICA_HTTP_PORT:-8547}:8547
      - ${REPLICA_HTTP_PORT:-8548}:8548

